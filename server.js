// server.js
require("dotenv").config();

const express = require("express");
const app = express();
const morgan = require("morgan");
const { readdirSync } = require("fs");
const fs = require("fs");
const cors = require("cors");
const dialogflow = require("@google-cloud/dialogflow");
const uuid = require("uuid");
const path = require("path");
const bodyParser = require("body-parser");

// DB libs
const mysql = require("mysql2");
const { Pool } = require("pg");

// ===== Route modules =====
const uploadSlipRoutes = require("./routes/uploadSlip");
const orderRoutes = require("./routes/order");
const slipAdminRoutes = require("./routes/slipAdmin");
const imageRoutes = require("./routes/image");
const adminMetricsRoutes = require("./routes/adminMetrics");
const adminBankInfoRoutes = require("./routes/adminBankInfo");
const addressRoutes = require("./routes/address"); // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
const productRoutes = require("./routes/product");
// ===== CORS =====
const ALLOW_ORIGINS = [
  "https://deeying-system.onrender.com",
  "http://localhost:5173",
  "http://localhost:3000"
];
app.use(
  cors({
    origin(origin, cb) {
      if (!origin || ALLOW_ORIGINS.includes(origin)) {
        return cb(null, true);
      }
      return cb(new Error("Not allowed by CORS"));
    },
    credentials: true,
    methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
    optionsSuccessStatus: 200,
  })
);

// ===== Body parsers =====
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(bodyParser.json({ limit: "10mb" }));
app.use(bodyParser.urlencoded({ extended: true, limit: "10mb" }));

// ===== Env warns =====
[
  "JWT_SECRET",
  "CLOUDINARY_CLOUD_NAME",
  "CLOUDINARY_API_KEY",
  "CLOUDINARY_API_SECRET",
  "DIALOGFLOW_PROJECT_ID",
  "GOOGLE_APPLICATION_CREDENTIALS",
].forEach((k) => {
  if (!process.env[k]) console.warn(`[WARN] Missing env ${k}`);
});

// ===== Core middleware =====
app.use(morgan("dev"));

// ===== Metrics =====
app.use("/api", adminMetricsRoutes);

// ===== DB wrapper (‡πÉ‡∏ä‡πâ Prisma ‡πÅ‡∏ó‡∏ô raw connection pool) =====
function makeDB() {
  // ‡πÉ‡∏ä‡πâ CONNECTION_POOL_URL ‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ DATABASE_URL
  const url = process.env.CONNECTION_POOL_URL || process.env.DATABASE_URL || "";
  const isPg = /^postgres(ql)?:\/\//i.test(url);

  if (isPg) {
    console.log('[DB] Using Prisma with PostgreSQL');

    // Simple wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°
    const query = async (sql, params = []) => {
      // Prisma Client ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ connection pool ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      console.warn('[DB] Raw query called - consider using Prisma Client directly');
      return [[]]; // Return empty result for compatibility
    };

    const db = {
      dialect: "postgres",
      query,
      raw: null // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ raw pool ‡πÅ‡∏•‡πâ‡∏ß
    };
    return db;
  }

  // MySQL (local)
  const pool = url
    ? mysql.createPool(url + "?charset=utf8mb4")
    : mysql.createPool({
        host: process.env.DB_HOST || "127.0.0.1",
        port: Number(process.env.DB_PORT || 3306),
        user: process.env.DB_USER || "root",
        password: process.env.DB_PASS || "",
        database: process.env.DB_NAME || "deeying",
        charset: "utf8mb4",
        waitForConnections: true,
        connectionLimit: 10,
        queueLimit: 0,
        acquireTimeout: 30000,
        timeout: 30000,
        idleTimeout: 300000,
        reconnect: true,
      });

  const db = {
    dialect: "mysql",
    query: (...args) => pool.promise().query(...args),
    raw: pool,
  };
  return db;
}

const db = makeDB();
console.log(`[DB] dialect = ${db.dialect}`);
app.use((req, _res, next) => {
  req.db = db;
  next();
});

// ===== Static =====
const UP_DIR = path.join(__dirname, "uploads", "slips");
fs.mkdirSync(UP_DIR, { recursive: true });
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// ===== Health =====
app.get("/healthz", async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await req.db.query("SELECT 1");
    res.json({ ok: true, database: "connected" });
  } catch (error) {
    console.error("[Health Check] Database error:", error.message);
    res.status(503).json({ ok: false, database: "disconnected", error: error.message });
  }
});

/* =======================================================================
 *  Main Routes (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: addressRoutes ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô orderRoutes)
 * ======================================================================= */
app.use("/api", uploadSlipRoutes);
app.use("/api", slipAdminRoutes);
app.use("/api", adminBankInfoRoutes);
app.use("/api", addressRoutes);  // <<<<< ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
app.use("/api", orderRoutes);
app.use("/api", imageRoutes);
app.use("/api", productRoutes);
/* =======================================================================
 *                    DIALOGFLOW + PRICE CHAT HANDLER
 * ======================================================================= */
let sessionClient = null;
try {
    sessionClient = new dialogflow.SessionsClient();
  console.log("[DF] ready project =", process.env.DIALOGFLOW_PROJECT_ID);
} catch (e) {
  console.error("[DF] init error:", e.message || e);
}

async function detectIntentDF(message, userId = "anon") {
  if (!sessionClient || !process.env.DIALOGFLOW_PROJECT_ID) return null;
  const sessionId = `${userId}-${uuid.v4()}`;
  const sessionPath = sessionClient.projectAgentSessionPath(
    process.env.DIALOGFLOW_PROJECT_ID,
    sessionId
  );
  const request = {
    session: sessionPath,
    queryInput: { text: { text: message, languageCode: "th-TH" } },
    queryParams: { timeZone: "Asia/Bangkok" },
  };
  const resp = await sessionClient.detectIntent(request);
  return resp?.[0]?.queryResult || {};
}

const pickProductParam = (fields = {}) =>
  fields.product?.stringValue ||
  fields.Product?.stringValue ||
  fields["‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]?.stringValue ||
  fields.any?.stringValue ||
  null;

const extractProductFromText = (text = "") => {
  let t = text.replace(/\s+/g, " ").replace(/[?ÔºüÔºÅ!]/g, "").trim();
  t = t
    .replace(/(‡∏£‡∏≤‡∏Ñ‡∏≤|price|‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£|‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà|‡∏Å‡∏µ‡πà‡∏ö‡∏≤‡∏ó)/gi, " ")
    .replace(/\s+/g, " ")
    .trim();
  return t || null;
};



// ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...

async function findProductInDB(dbWrap, name) {
  // 1. ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©
  const cleanName = name.replace(/\s*:\s*/g, " ").trim().toLowerCase(); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Azano Model : JL-168 ‡πÄ‡∏õ‡πá‡∏ô azano model jl-168

  // 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ILIKE (Case-Insensitive)
  const [rows] = await dbWrap.query(
    `SELECT id, title, price, quantity
     FROM "Product"
     WHERE (deleted IS NULL OR deleted = false)
     AND LOWER(title) LIKE ?
     LIMIT 1`,
    [`%${cleanName}%`]
  );

  // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  return rows?.[0] || null;
}

// ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...


async function chatHandler(req, res) {
  const message = (req.body?.message ?? req.body?.text ?? req.body?.q ?? "")
    .toString()
    .trim();
  if (!message) return res.status(400).json({ reply: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" });

  try {
    const result = await detectIntentDF(message);
    const intent = result?.intent?.displayName || null;
    let productName = pickProductParam(result?.parameters?.fields);

    let finalIntent = intent;
    if (finalIntent === "‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" && !productName)
      productName = extractProductFromText(message);
    if (!finalIntent && /(‡∏£‡∏≤‡∏Ñ‡∏≤|price)/i.test(message)) {
      finalIntent = "‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
      if (!productName) productName = extractProductFromText(message);
    }

    if (finalIntent === "‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" && productName) {
      const p = await findProductInDB(req.db, productName);
      if (!p) return res.json({ reply: `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Äú${productName}‚Äù ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` });
      return res.json({
        reply: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∑‡∏≠ ‚Äú${p.title}‚Äù ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö  üëá`,
        rich: {
          type: "product_suggestion",
          product: {
            id: p.id,
            title: p.title,
            price: Number(p.price) || 0,
            quantity: Number(p.quantity) || 0,
          },
        },
      });
    }

    if (result?.fulfillmentText)
      return res.json({ reply: result.fulfillmentText });
    return res.json({ reply: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°" });
  } catch (e) {
    console.error("/chat error:", e);
    return res
      .status(500)
      .json({ reply: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö" });
  }
}

// ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á chatHandler ...

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
app.post("/api/chat/search", async (req, res) => {
  const message = (req.body?.message ?? req.body?.text ?? req.body?.q ?? "").toString().trim();
  if (!message) {
    return res.status(400).json({ reply: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" });
  }

  const p = await findProductInDB(req.db, message);
  if (!p) return res.json({ reply: `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Äú${message}‚Äù ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤` });

  return res.json({
    reply: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∑‡∏≠ ‚Äú${p.title}‚Äù ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üëá`,
    rich: {
      type: "product_suggestion",
      product: {
        id: p.id,
        title: p.title,
        price: Number(p.price) || 0,
        quantity: Number(p.quantity) || 0,
      },
    },
  });
});

// ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...



app.post("/chat", chatHandler);
app.post("/api/chat", chatHandler);

/* =======================================================================
 *                           AUTO-LOAD OTHER ROUTES
 * ======================================================================= */
const routesDir = path.join(__dirname, "routes");
const skip = new Set([
  "uploadSlip.js",
  "slipAdmin.js",
  "order.js",
  "image.js",
  "adminMetrics.js",
  "adminBankInfo.js",
  "address.js",
]);
readdirSync(routesDir).forEach((file) => {
  if (skip.has(file)) return;
  app.use("/api", require(path.join(routesDir, file)));
});

// ===== 404 & Error Handler =====
app.use((req, res) => res.status(404).json({ message: "Not found" }));
app.use((err, _req, res, _next) => {
  console.error("UNHANDLED ERROR:", err);
  res.status(500).json({ message: "Server error", detail: err?.message });
});

// ===== Start =====
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`üöÄ Server is running on port ${PORT}`));
