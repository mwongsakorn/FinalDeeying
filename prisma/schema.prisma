// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider  = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  name      String?
  picture   String?
  role      String   @default("user")
  enabled   Boolean  @default(true)
  address   String?
  orders    Order[]
  carts     Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  price       Float
  sold        Int              @default(0)
  quantity    Int
  orderItems  ProductOnOrder[]
  cartItems   ProductOnCart[]
  images      Image[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  deleted     Boolean          @default(false)
}

enum OrderStatus {
  Not_Process
  Pending
  Processing
  Completed
  Cancelled
}

model Order {
  id              Int              @id @default(autoincrement())
  products        ProductOnOrder[]
  cartTotal       Float
  orderStatus     OrderStatus      @default(Not_Process)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderedBy       User             @relation(fields: [orderedById], references: [id])
  orderedById     Int
  stripePaymentId String
  amount          Int
  status          String
  currentcy       String
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id          Int             @id @default(autoincrement())
  products    ProductOnCart[]
  cartTotal   Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderedBy   User            @relation(fields: [orderedById], references: [id])
  orderedById Int
  cartAddress CartAddress?
}

model CartAddress {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int      @unique // 1 cart = 1 address
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_addresses") // ให้ตรงกับชื่อ table ใน DB
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

enum PaymentSlipStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSlip {
  id         Int               @id @default(autoincrement())
  cart_id    Int
  user_id    Int?
  amount     Decimal           @db.Decimal(10, 2)
  slip_path  String            @db.VarChar(255)
  shipping_address String?          @db.VarChar(500)
  status     PaymentSlipStatus @default(PENDING)
  created_at DateTime?         @default(now())
  updated_at DateTime?         @updatedAt
  
  stock_deducted Boolean       @default(false)
  
  @@map("payment_slips")
}

model BankInfo {
  id            Int      @id @default(autoincrement())
  bankName      String
  accountNumber String
  accountName   String
  qrCodeImage   String? // เก็บ URL ของ QR code
  bankLogo      String? // เก็บ URL ของรูปธนาคาร
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PaymentSlipItem {
  id         Int      @id @default(autoincrement())
  slip_id    Int
  product_id Int?
  title      String   @db.VarChar(255)
  price      Decimal  @db.Decimal(10, 2)
  qty        Int
  created_at DateTime @default(now())
  @@map("payment_slip_items")
}
